// Generated by CoffeeScript 1.4.0

(function() {
  var Field, Playfield;
  Field = (function() {

    function Field(parent, element, x, y, value) {
      this.parent = parent;
      this.element = element;
      this.x = x;
      this.y = y;
      this.value = value != null ? value : false;
      this.item = $('<span class="playfield-item"/>');
      this.element.empty().append(this.item);
      this.set();
    }

    Field.prototype.update = function(chain, label) {
      var type;
      if (chain == null) {
        chain = false;
      }
      this.item.removeClass(((function() {
        var _i, _len, _ref, _results;
        _ref = this.parent.types;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          type = _ref[_i];
          _results.push(type["class"]);
        }
        return _results;
      }).call(this)).join(" "));
      type = this.parent.types[this.value];
      this.item.addClass(type["class"]);
      if (location.hash.match(/debug/)) {
        this.item.text(label || '');
      }
      return this.element.toggleClass("playfield-chain", chain);
    };

    Field.prototype.set = function(value) {
      if (value == null) {
        value = false;
      }
      if (value !== false) {
        this.value = value;
      } else {
        this.value = ~~(Math.random() * 123456);
      }
      this.value = this.value % this.parent.types.length;
      return this.element.data('value', this.value);
    };

    return Field;

  })();
  Playfield = (function() {

    function Playfield(selector, types, width, height) {
      var field, row, table, td, x, y, _i, _j, _ref, _ref1;
      this.types = types;
      this.width = width != null ? width : 10;
      this.height = height != null ? height : 8;
      this.field = {};
      table = $('<table class="playfield"/>');
      for (y = _i = 1, _ref = this.height; 1 <= _ref ? _i <= _ref : _i >= _ref; y = 1 <= _ref ? ++_i : --_i) {
        row = $('<tr/>');
        this.field[y] = {};
        for (x = _j = 1, _ref1 = this.width; 1 <= _ref1 ? _j <= _ref1 : _j >= _ref1; x = 1 <= _ref1 ? ++_j : --_j) {
          td = $('<td class="playfield-field"/>');
          field = new Field(this, td, x, y);
          this.field[y][x] = field;
          td.data('x', x);
          td.data('y', y);
          row.append(td);
        }
        table.append(row);
      }
      $(selector).append(table);
      this.display();
    }

    Playfield.prototype.randomize = function() {
      var x, y, _i, _j, _ref, _ref1;
      for (y = _i = 1, _ref = this.height; 1 <= _ref ? _i <= _ref : _i >= _ref; y = 1 <= _ref ? ++_i : --_i) {
        for (x = _j = 1, _ref1 = this.width; 1 <= _ref1 ? _j <= _ref1 : _j >= _ref1; x = 1 <= _ref1 ? ++_j : --_j) {
          this.field[y][x].set();
        }
      }
      return this;
    };

    Playfield.prototype.set = function(x, y, value) {
      this.field[y][x].set(value);
      return this;
    };

    Playfield.prototype.display = function() {
      var chain, chained, i, value, x, y, _i, _j, _k, _l, _m, _n, _o, _p, _q, _r, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8, _ref9;
      chained = {};
      for (y = _i = 1, _ref = this.height; 1 <= _ref ? _i <= _ref : _i >= _ref; y = 1 <= _ref ? ++_i : --_i) {
        chained[y] = {};
        for (x = _j = 1, _ref1 = this.width; 1 <= _ref1 ? _j <= _ref1 : _j >= _ref1; x = 1 <= _ref1 ? ++_j : --_j) {
          chained[y][x] = 0;
        }
      }
      for (x = _k = 1, _ref2 = this.width; 1 <= _ref2 ? _k <= _ref2 : _k >= _ref2; x = 1 <= _ref2 ? ++_k : --_k) {
        for (y = _l = 1, _ref3 = this.height; 1 <= _ref3 ? _l <= _ref3 : _l >= _ref3; y = 1 <= _ref3 ? ++_l : --_l) {
          if (--chain >= 1) {
            continue;
          }
          value = this.field[y][x].value;
          chain = 1;
          while ((y + chain <= this.height) && (this.field[y + chain][x].value === value)) {
            chain += 1;
          }
          if (chain >= 3) {
            for (i = _m = 0, _ref4 = chain - 1; 0 <= _ref4 ? _m <= _ref4 : _m >= _ref4; i = 0 <= _ref4 ? ++_m : --_m) {
              chained[y + i][x] += chain;
            }
          }
        }
      }
      for (y = _n = 1, _ref5 = this.height; 1 <= _ref5 ? _n <= _ref5 : _n >= _ref5; y = 1 <= _ref5 ? ++_n : --_n) {
        for (x = _o = 1, _ref6 = this.width; 1 <= _ref6 ? _o <= _ref6 : _o >= _ref6; x = 1 <= _ref6 ? ++_o : --_o) {
          if (--chain >= 1) {
            continue;
          }
          value = this.field[y][x].value;
          chain = 1;
          while ((x + chain <= this.width) && (this.field[y][x + chain].value === value)) {
            chain += 1;
          }
          if (chain >= 3) {
            for (i = _p = 0, _ref7 = chain - 1; 0 <= _ref7 ? _p <= _ref7 : _p >= _ref7; i = 0 <= _ref7 ? ++_p : --_p) {
              chained[y][x + i] += chain;
            }
          }
        }
      }
      for (y = _q = 1, _ref8 = this.height; 1 <= _ref8 ? _q <= _ref8 : _q >= _ref8; y = 1 <= _ref8 ? ++_q : --_q) {
        for (x = _r = 1, _ref9 = this.width; 1 <= _ref9 ? _r <= _ref9 : _r >= _ref9; x = 1 <= _ref9 ? ++_r : --_r) {
          this.field[y][x].update(chained[y][x] > 0, chained[y][x]);
        }
      }
      return this;
    };

    return Playfield;

  })();
  return $.getJSON('types.json', function(types) {
    var field;
    field = new Playfield("#field", types);
    $('.playfield-field').on('click', function() {
      var data;
      data = $(this).data();
      field.set(data.x, data.y, data.value + 1);
      return field.display();
    });
    return $('#randomize').on('click', function() {
      return field.randomize().display();
    });
  });
})();
